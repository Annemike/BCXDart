# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from piksi_ros/Observations.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import piksi_ros.msg
import std_msgs.msg

class Observations(genpy.Message):
  _md5sum = "e53a651b9eb94ee6416715c723ccbfb6"
  _type = "piksi_ros/Observations"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header # ROS header

uint32 tow # Milliseconds since start of GPS week
uint16 wn # GPS week number
uint8 n_obs # Total number of observations

piksi_ros/Obs[] obs # Observations

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: piksi_ros/Obs
uint32 P # Psueudorange observation [cm]
piksi_ros/CarrierPhase L # Carrier phase [cycles]
uint8 cn0 # Carrier-to-Noise density [dB Hz * 4]
uint16 lock # Lock indicator. This value changes whenever a satellite signal has lost and regained lock, indicating that the carrier phase ambiguity may have changed
piksi_ros/Sid sid # Satellite identifier

================================================================================
MSG: piksi_ros/CarrierPhase
# Carrier phase observation here is represented as a 40-bit fixed
# point number with Q32.8 layout (i.e. 32-bits of whole cycles and 8-bits of fractional cycles).

int32 i # Carrier phase whole cycles [cycles]
uint8 f # Carrier phase fractional part [cycles/256]

================================================================================
MSG: piksi_ros/Sid
uint16 sat # Constellation-specific satellite identifier
uint8 band # Signal band
uint8 constellation # Constellation to which the satellite belongs
"""
  __slots__ = ['header','tow','wn','n_obs','obs']
  _slot_types = ['std_msgs/Header','uint32','uint16','uint8','piksi_ros/Obs[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tow,wn,n_obs,obs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Observations, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tow is None:
        self.tow = 0
      if self.wn is None:
        self.wn = 0
      if self.n_obs is None:
        self.n_obs = 0
      if self.obs is None:
        self.obs = []
    else:
      self.header = std_msgs.msg.Header()
      self.tow = 0
      self.wn = 0
      self.n_obs = 0
      self.obs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IHB().pack(_x.tow, _x.wn, _x.n_obs))
      length = len(self.obs)
      buff.write(_struct_I.pack(length))
      for val1 in self.obs:
        buff.write(_get_struct_I().pack(val1.P))
        _v1 = val1.L
        _x = _v1
        buff.write(_get_struct_iB().pack(_x.i, _x.f))
        _x = val1
        buff.write(_get_struct_BH().pack(_x.cn0, _x.lock))
        _v2 = val1.sid
        _x = _v2
        buff.write(_get_struct_H2B().pack(_x.sat, _x.band, _x.constellation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obs is None:
        self.obs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.tow, _x.wn, _x.n_obs,) = _get_struct_IHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obs = []
      for i in range(0, length):
        val1 = piksi_ros.msg.Obs()
        start = end
        end += 4
        (val1.P,) = _get_struct_I().unpack(str[start:end])
        _v3 = val1.L
        _x = _v3
        start = end
        end += 5
        (_x.i, _x.f,) = _get_struct_iB().unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.cn0, _x.lock,) = _get_struct_BH().unpack(str[start:end])
        _v4 = val1.sid
        _x = _v4
        start = end
        end += 4
        (_x.sat, _x.band, _x.constellation,) = _get_struct_H2B().unpack(str[start:end])
        self.obs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IHB().pack(_x.tow, _x.wn, _x.n_obs))
      length = len(self.obs)
      buff.write(_struct_I.pack(length))
      for val1 in self.obs:
        buff.write(_get_struct_I().pack(val1.P))
        _v5 = val1.L
        _x = _v5
        buff.write(_get_struct_iB().pack(_x.i, _x.f))
        _x = val1
        buff.write(_get_struct_BH().pack(_x.cn0, _x.lock))
        _v6 = val1.sid
        _x = _v6
        buff.write(_get_struct_H2B().pack(_x.sat, _x.band, _x.constellation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obs is None:
        self.obs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.tow, _x.wn, _x.n_obs,) = _get_struct_IHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obs = []
      for i in range(0, length):
        val1 = piksi_ros.msg.Obs()
        start = end
        end += 4
        (val1.P,) = _get_struct_I().unpack(str[start:end])
        _v7 = val1.L
        _x = _v7
        start = end
        end += 5
        (_x.i, _x.f,) = _get_struct_iB().unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.cn0, _x.lock,) = _get_struct_BH().unpack(str[start:end])
        _v8 = val1.sid
        _x = _v8
        start = end
        end += 4
        (_x.sat, _x.band, _x.constellation,) = _get_struct_H2B().unpack(str[start:end])
        self.obs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH = None
def _get_struct_BH():
    global _struct_BH
    if _struct_BH is None:
        _struct_BH = struct.Struct("<BH")
    return _struct_BH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IHB = None
def _get_struct_IHB():
    global _struct_IHB
    if _struct_IHB is None:
        _struct_IHB = struct.Struct("<IHB")
    return _struct_IHB
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_H2B = None
def _get_struct_H2B():
    global _struct_H2B
    if _struct_H2B is None:
        _struct_H2B = struct.Struct("<H2B")
    return _struct_H2B
