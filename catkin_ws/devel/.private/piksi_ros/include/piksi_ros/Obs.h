// Generated by gencpp from file piksi_ros/Obs.msg
// DO NOT EDIT!


#ifndef PIKSI_ROS_MESSAGE_OBS_H
#define PIKSI_ROS_MESSAGE_OBS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <piksi_ros/CarrierPhase.h>
#include <piksi_ros/Sid.h>

namespace piksi_ros
{
template <class ContainerAllocator>
struct Obs_
{
  typedef Obs_<ContainerAllocator> Type;

  Obs_()
    : P(0)
    , L()
    , cn0(0)
    , lock(0)
    , sid()  {
    }
  Obs_(const ContainerAllocator& _alloc)
    : P(0)
    , L(_alloc)
    , cn0(0)
    , lock(0)
    , sid(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _P_type;
  _P_type P;

   typedef  ::piksi_ros::CarrierPhase_<ContainerAllocator>  _L_type;
  _L_type L;

   typedef uint8_t _cn0_type;
  _cn0_type cn0;

   typedef uint16_t _lock_type;
  _lock_type lock;

   typedef  ::piksi_ros::Sid_<ContainerAllocator>  _sid_type;
  _sid_type sid;




  typedef boost::shared_ptr< ::piksi_ros::Obs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_ros::Obs_<ContainerAllocator> const> ConstPtr;

}; // struct Obs_

typedef ::piksi_ros::Obs_<std::allocator<void> > Obs;

typedef boost::shared_ptr< ::piksi_ros::Obs > ObsPtr;
typedef boost::shared_ptr< ::piksi_ros::Obs const> ObsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_ros::Obs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_ros::Obs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_ros': ['/home/christian/DARTFSD/catkin_ws/src/piksi_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Obs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Obs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Obs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Obs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Obs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Obs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_ros::Obs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4d3fae07ec1003bc792498ae2d73eb8";
  }

  static const char* value(const ::piksi_ros::Obs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4d3fae07ec1003bULL;
  static const uint64_t static_value2 = 0xc792498ae2d73eb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_ros::Obs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_ros/Obs";
  }

  static const char* value(const ::piksi_ros::Obs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_ros::Obs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 P # Psueudorange observation [cm]\n\
piksi_ros/CarrierPhase L # Carrier phase [cycles]\n\
uint8 cn0 # Carrier-to-Noise density [dB Hz * 4]\n\
uint16 lock # Lock indicator. This value changes whenever a satellite signal has lost and regained lock, indicating that the carrier phase ambiguity may have changed\n\
piksi_ros/Sid sid # Satellite identifier\n\
\n\
================================================================================\n\
MSG: piksi_ros/CarrierPhase\n\
# Carrier phase observation here is represented as a 40-bit fixed\n\
# point number with Q32.8 layout (i.e. 32-bits of whole cycles and 8-bits of fractional cycles).\n\
\n\
int32 i # Carrier phase whole cycles [cycles]\n\
uint8 f # Carrier phase fractional part [cycles/256]\n\
\n\
================================================================================\n\
MSG: piksi_ros/Sid\n\
uint16 sat # Constellation-specific satellite identifier\n\
uint8 band # Signal band\n\
uint8 constellation # Constellation to which the satellite belongs\n\
";
  }

  static const char* value(const ::piksi_ros::Obs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_ros::Obs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.P);
      stream.next(m.L);
      stream.next(m.cn0);
      stream.next(m.lock);
      stream.next(m.sid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_ros::Obs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_ros::Obs_<ContainerAllocator>& v)
  {
    s << indent << "P: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.P);
    s << indent << "L: ";
    s << std::endl;
    Printer< ::piksi_ros::CarrierPhase_<ContainerAllocator> >::stream(s, indent + "  ", v.L);
    s << indent << "cn0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cn0);
    s << indent << "lock: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lock);
    s << indent << "sid: ";
    s << std::endl;
    Printer< ::piksi_ros::Sid_<ContainerAllocator> >::stream(s, indent + "  ", v.sid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_ROS_MESSAGE_OBS_H
