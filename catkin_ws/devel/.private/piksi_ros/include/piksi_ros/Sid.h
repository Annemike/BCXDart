// Generated by gencpp from file piksi_ros/Sid.msg
// DO NOT EDIT!


#ifndef PIKSI_ROS_MESSAGE_SID_H
#define PIKSI_ROS_MESSAGE_SID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piksi_ros
{
template <class ContainerAllocator>
struct Sid_
{
  typedef Sid_<ContainerAllocator> Type;

  Sid_()
    : sat(0)
    , band(0)
    , constellation(0)  {
    }
  Sid_(const ContainerAllocator& _alloc)
    : sat(0)
    , band(0)
    , constellation(0)  {
  (void)_alloc;
    }



   typedef uint16_t _sat_type;
  _sat_type sat;

   typedef uint8_t _band_type;
  _band_type band;

   typedef uint8_t _constellation_type;
  _constellation_type constellation;




  typedef boost::shared_ptr< ::piksi_ros::Sid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_ros::Sid_<ContainerAllocator> const> ConstPtr;

}; // struct Sid_

typedef ::piksi_ros::Sid_<std::allocator<void> > Sid;

typedef boost::shared_ptr< ::piksi_ros::Sid > SidPtr;
typedef boost::shared_ptr< ::piksi_ros::Sid const> SidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_ros::Sid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_ros::Sid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_ros': ['/home/christian/DARTFSD/catkin_ws/src/piksi_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Sid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Sid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Sid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Sid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Sid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Sid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_ros::Sid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d0865629d1d86dcdf3df8f0aa144e51";
  }

  static const char* value(const ::piksi_ros::Sid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d0865629d1d86dcULL;
  static const uint64_t static_value2 = 0xdf3df8f0aa144e51ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_ros::Sid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_ros/Sid";
  }

  static const char* value(const ::piksi_ros::Sid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_ros::Sid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 sat # Constellation-specific satellite identifier\n\
uint8 band # Signal band\n\
uint8 constellation # Constellation to which the satellite belongs\n\
";
  }

  static const char* value(const ::piksi_ros::Sid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_ros::Sid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sat);
      stream.next(m.band);
      stream.next(m.constellation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_ros::Sid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_ros::Sid_<ContainerAllocator>& v)
  {
    s << indent << "sat: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sat);
    s << indent << "band: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.band);
    s << indent << "constellation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.constellation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_ROS_MESSAGE_SID_H
