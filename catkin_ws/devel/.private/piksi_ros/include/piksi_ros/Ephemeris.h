// Generated by gencpp from file piksi_ros/Ephemeris.msg
// DO NOT EDIT!


#ifndef PIKSI_ROS_MESSAGE_EPHEMERIS_H
#define PIKSI_ROS_MESSAGE_EPHEMERIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <piksi_ros/Sid.h>

namespace piksi_ros
{
template <class ContainerAllocator>
struct Ephemeris_
{
  typedef Ephemeris_<ContainerAllocator> Type;

  Ephemeris_()
    : header()
    , tgd(0.0)
    , c_rs(0.0)
    , c_rc(0.0)
    , c_uc(0.0)
    , c_us(0.0)
    , c_ic(0.0)
    , c_is(0.0)
    , dn(0.0)
    , m0(0.0)
    , ecc(0.0)
    , sqrta(0.0)
    , omega0(0.0)
    , omegadot(0.0)
    , w(0.0)
    , inc(0.0)
    , inc_dot(0.0)
    , af0(0.0)
    , af1(0.0)
    , af2(0.0)
    , toe_tow(0.0)
    , toe_wn(0)
    , toc_tow(0.0)
    , toc_wn(0)
    , valid(0)
    , healthy(0)
    , sid()
    , iode(0)
    , iodc(0)  {
    }
  Ephemeris_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tgd(0.0)
    , c_rs(0.0)
    , c_rc(0.0)
    , c_uc(0.0)
    , c_us(0.0)
    , c_ic(0.0)
    , c_is(0.0)
    , dn(0.0)
    , m0(0.0)
    , ecc(0.0)
    , sqrta(0.0)
    , omega0(0.0)
    , omegadot(0.0)
    , w(0.0)
    , inc(0.0)
    , inc_dot(0.0)
    , af0(0.0)
    , af1(0.0)
    , af2(0.0)
    , toe_tow(0.0)
    , toe_wn(0)
    , toc_tow(0.0)
    , toc_wn(0)
    , valid(0)
    , healthy(0)
    , sid(_alloc)
    , iode(0)
    , iodc(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _tgd_type;
  _tgd_type tgd;

   typedef double _c_rs_type;
  _c_rs_type c_rs;

   typedef double _c_rc_type;
  _c_rc_type c_rc;

   typedef double _c_uc_type;
  _c_uc_type c_uc;

   typedef double _c_us_type;
  _c_us_type c_us;

   typedef double _c_ic_type;
  _c_ic_type c_ic;

   typedef double _c_is_type;
  _c_is_type c_is;

   typedef double _dn_type;
  _dn_type dn;

   typedef double _m0_type;
  _m0_type m0;

   typedef double _ecc_type;
  _ecc_type ecc;

   typedef double _sqrta_type;
  _sqrta_type sqrta;

   typedef double _omega0_type;
  _omega0_type omega0;

   typedef double _omegadot_type;
  _omegadot_type omegadot;

   typedef double _w_type;
  _w_type w;

   typedef double _inc_type;
  _inc_type inc;

   typedef double _inc_dot_type;
  _inc_dot_type inc_dot;

   typedef double _af0_type;
  _af0_type af0;

   typedef double _af1_type;
  _af1_type af1;

   typedef double _af2_type;
  _af2_type af2;

   typedef double _toe_tow_type;
  _toe_tow_type toe_tow;

   typedef uint16_t _toe_wn_type;
  _toe_wn_type toe_wn;

   typedef double _toc_tow_type;
  _toc_tow_type toc_tow;

   typedef uint16_t _toc_wn_type;
  _toc_wn_type toc_wn;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _healthy_type;
  _healthy_type healthy;

   typedef  ::piksi_ros::Sid_<ContainerAllocator>  _sid_type;
  _sid_type sid;

   typedef uint8_t _iode_type;
  _iode_type iode;

   typedef uint16_t _iodc_type;
  _iodc_type iodc;




  typedef boost::shared_ptr< ::piksi_ros::Ephemeris_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_ros::Ephemeris_<ContainerAllocator> const> ConstPtr;

}; // struct Ephemeris_

typedef ::piksi_ros::Ephemeris_<std::allocator<void> > Ephemeris;

typedef boost::shared_ptr< ::piksi_ros::Ephemeris > EphemerisPtr;
typedef boost::shared_ptr< ::piksi_ros::Ephemeris const> EphemerisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_ros::Ephemeris_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_ros::Ephemeris_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_ros': ['/home/christian/DARTFSD/catkin_ws/src/piksi_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Ephemeris_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Ephemeris_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Ephemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Ephemeris_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Ephemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Ephemeris_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_ros::Ephemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28a7e20deec95d3746abb19bb2db1355";
  }

  static const char* value(const ::piksi_ros::Ephemeris_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28a7e20deec95d37ULL;
  static const uint64_t static_value2 = 0x46abb19bb2db1355ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_ros::Ephemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_ros/Ephemeris";
  }

  static const char* value(const ::piksi_ros::Ephemeris_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_ros::Ephemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64 tgd # Group delay differential between L1 and L2 [s]\n\
\n\
float64 c_rs # Amplitude of the sine harmonic correction term to the orbit radius [m]\n\
float64 c_rc # Amplitude of the cosine harmonic correction term to the orbit radius [m]\n\
float64 c_uc # Amplitude of the cosine harmonic correction term to the argument of latitude [rad]\n\
float64 c_us # Amplitude of the sine harmonic correction term to the argument of latitude [rad]\n\
float64 c_ic # Amplitude of the cosine harmonic correction term to the angle of inclination [rad]\n\
float64 c_is # Amplitude of the sine harmonic correction term to the angle of inclination [rad]\n\
\n\
float64 dn # Mean motion difference [rad/s]\n\
\n\
float64 m0 # Mean anomaly at reference time [rad]\n\
\n\
float64 ecc # Eccentricity of satellite orbit\n\
float64 sqrta # Square root of the semi-major axis of orbit [m^(1/2)]\n\
\n\
float64 omega0 # Longitude of ascending node of orbit plane at weekly epoch [rad]\n\
float64 omegadot # Rate of right ascension [rad/s]\n\
\n\
float64 w # Argument of perigee []\n\
\n\
float64 inc # Inclination\n\
float64 inc_dot # Inclination first derivative\n\
\n\
float64 af0 # Polynomial clock correction coefficient (clock bias)\n\
float64 af1 # Polynomial clock correction coefficient (clock drift)\n\
float64 af2 # Polynomial clock correction coefficient (rate of clock drift)\n\
\n\
float64 toe_tow # Time of week\n\
uint16 toe_wn # Week number\n\
\n\
float64 toc_tow # Clock reference time of week\n\
uint16 toc_wn # Clock reference week number\n\
\n\
uint8 valid # Is valid?\n\
uint8 healthy # Satellite is healthy?\n\
\n\
piksi_ros/Sid sid\n\
\n\
uint8 iode # Issue of ephemeris data\n\
uint16 iodc # Issue of clock data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: piksi_ros/Sid\n\
uint16 sat # Constellation-specific satellite identifier\n\
uint8 band # Signal band\n\
uint8 constellation # Constellation to which the satellite belongs\n\
";
  }

  static const char* value(const ::piksi_ros::Ephemeris_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_ros::Ephemeris_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tgd);
      stream.next(m.c_rs);
      stream.next(m.c_rc);
      stream.next(m.c_uc);
      stream.next(m.c_us);
      stream.next(m.c_ic);
      stream.next(m.c_is);
      stream.next(m.dn);
      stream.next(m.m0);
      stream.next(m.ecc);
      stream.next(m.sqrta);
      stream.next(m.omega0);
      stream.next(m.omegadot);
      stream.next(m.w);
      stream.next(m.inc);
      stream.next(m.inc_dot);
      stream.next(m.af0);
      stream.next(m.af1);
      stream.next(m.af2);
      stream.next(m.toe_tow);
      stream.next(m.toe_wn);
      stream.next(m.toc_tow);
      stream.next(m.toc_wn);
      stream.next(m.valid);
      stream.next(m.healthy);
      stream.next(m.sid);
      stream.next(m.iode);
      stream.next(m.iodc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ephemeris_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_ros::Ephemeris_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_ros::Ephemeris_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tgd: ";
    Printer<double>::stream(s, indent + "  ", v.tgd);
    s << indent << "c_rs: ";
    Printer<double>::stream(s, indent + "  ", v.c_rs);
    s << indent << "c_rc: ";
    Printer<double>::stream(s, indent + "  ", v.c_rc);
    s << indent << "c_uc: ";
    Printer<double>::stream(s, indent + "  ", v.c_uc);
    s << indent << "c_us: ";
    Printer<double>::stream(s, indent + "  ", v.c_us);
    s << indent << "c_ic: ";
    Printer<double>::stream(s, indent + "  ", v.c_ic);
    s << indent << "c_is: ";
    Printer<double>::stream(s, indent + "  ", v.c_is);
    s << indent << "dn: ";
    Printer<double>::stream(s, indent + "  ", v.dn);
    s << indent << "m0: ";
    Printer<double>::stream(s, indent + "  ", v.m0);
    s << indent << "ecc: ";
    Printer<double>::stream(s, indent + "  ", v.ecc);
    s << indent << "sqrta: ";
    Printer<double>::stream(s, indent + "  ", v.sqrta);
    s << indent << "omega0: ";
    Printer<double>::stream(s, indent + "  ", v.omega0);
    s << indent << "omegadot: ";
    Printer<double>::stream(s, indent + "  ", v.omegadot);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "inc: ";
    Printer<double>::stream(s, indent + "  ", v.inc);
    s << indent << "inc_dot: ";
    Printer<double>::stream(s, indent + "  ", v.inc_dot);
    s << indent << "af0: ";
    Printer<double>::stream(s, indent + "  ", v.af0);
    s << indent << "af1: ";
    Printer<double>::stream(s, indent + "  ", v.af1);
    s << indent << "af2: ";
    Printer<double>::stream(s, indent + "  ", v.af2);
    s << indent << "toe_tow: ";
    Printer<double>::stream(s, indent + "  ", v.toe_tow);
    s << indent << "toe_wn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.toe_wn);
    s << indent << "toc_tow: ";
    Printer<double>::stream(s, indent + "  ", v.toc_tow);
    s << indent << "toc_wn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.toc_wn);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "healthy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.healthy);
    s << indent << "sid: ";
    s << std::endl;
    Printer< ::piksi_ros::Sid_<ContainerAllocator> >::stream(s, indent + "  ", v.sid);
    s << indent << "iode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iode);
    s << indent << "iodc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iodc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_ROS_MESSAGE_EPHEMERIS_H
