// Generated by gencpp from file piksi_ros/Observations.msg
// DO NOT EDIT!


#ifndef PIKSI_ROS_MESSAGE_OBSERVATIONS_H
#define PIKSI_ROS_MESSAGE_OBSERVATIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <piksi_ros/Obs.h>

namespace piksi_ros
{
template <class ContainerAllocator>
struct Observations_
{
  typedef Observations_<ContainerAllocator> Type;

  Observations_()
    : header()
    , tow(0)
    , wn(0)
    , n_obs(0)
    , obs()  {
    }
  Observations_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tow(0)
    , wn(0)
    , n_obs(0)
    , obs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _tow_type;
  _tow_type tow;

   typedef uint16_t _wn_type;
  _wn_type wn;

   typedef uint8_t _n_obs_type;
  _n_obs_type n_obs;

   typedef std::vector< ::piksi_ros::Obs_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::piksi_ros::Obs_<ContainerAllocator> >::other >  _obs_type;
  _obs_type obs;




  typedef boost::shared_ptr< ::piksi_ros::Observations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_ros::Observations_<ContainerAllocator> const> ConstPtr;

}; // struct Observations_

typedef ::piksi_ros::Observations_<std::allocator<void> > Observations;

typedef boost::shared_ptr< ::piksi_ros::Observations > ObservationsPtr;
typedef boost::shared_ptr< ::piksi_ros::Observations const> ObservationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_ros::Observations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_ros::Observations_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piksi_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piksi_ros': ['/home/christian/DARTFSD/catkin_ws/src/piksi_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Observations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_ros::Observations_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Observations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_ros::Observations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Observations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_ros::Observations_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_ros::Observations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e53a651b9eb94ee6416715c723ccbfb6";
  }

  static const char* value(const ::piksi_ros::Observations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe53a651b9eb94ee6ULL;
  static const uint64_t static_value2 = 0x416715c723ccbfb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_ros::Observations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_ros/Observations";
  }

  static const char* value(const ::piksi_ros::Observations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_ros::Observations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header # ROS header\n\
\n\
uint32 tow # Milliseconds since start of GPS week\n\
uint16 wn # GPS week number\n\
uint8 n_obs # Total number of observations\n\
\n\
piksi_ros/Obs[] obs # Observations\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: piksi_ros/Obs\n\
uint32 P # Psueudorange observation [cm]\n\
piksi_ros/CarrierPhase L # Carrier phase [cycles]\n\
uint8 cn0 # Carrier-to-Noise density [dB Hz * 4]\n\
uint16 lock # Lock indicator. This value changes whenever a satellite signal has lost and regained lock, indicating that the carrier phase ambiguity may have changed\n\
piksi_ros/Sid sid # Satellite identifier\n\
\n\
================================================================================\n\
MSG: piksi_ros/CarrierPhase\n\
# Carrier phase observation here is represented as a 40-bit fixed\n\
# point number with Q32.8 layout (i.e. 32-bits of whole cycles and 8-bits of fractional cycles).\n\
\n\
int32 i # Carrier phase whole cycles [cycles]\n\
uint8 f # Carrier phase fractional part [cycles/256]\n\
\n\
================================================================================\n\
MSG: piksi_ros/Sid\n\
uint16 sat # Constellation-specific satellite identifier\n\
uint8 band # Signal band\n\
uint8 constellation # Constellation to which the satellite belongs\n\
";
  }

  static const char* value(const ::piksi_ros::Observations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_ros::Observations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tow);
      stream.next(m.wn);
      stream.next(m.n_obs);
      stream.next(m.obs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_ros::Observations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_ros::Observations_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tow: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tow);
    s << indent << "wn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wn);
    s << indent << "n_obs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_obs);
    s << indent << "obs[]" << std::endl;
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      s << indent << "  obs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::piksi_ros::Obs_<ContainerAllocator> >::stream(s, indent + "    ", v.obs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_ROS_MESSAGE_OBSERVATIONS_H
