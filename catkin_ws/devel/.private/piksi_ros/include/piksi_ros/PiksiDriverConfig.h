//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the piksi_ros package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __piksi_ros__PIKSIDRIVERCONFIG_H__
#define __piksi_ros__PIKSIDRIVERCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace piksi_ros
{
  class PiksiDriverConfigStatics;
  
  class PiksiDriverConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(PiksiDriverConfig &config, const PiksiDriverConfig &max, const PiksiDriverConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const PiksiDriverConfig &config1, const PiksiDriverConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, PiksiDriverConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const PiksiDriverConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PiksiDriverConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const PiksiDriverConfig &config) const = 0;
      virtual void getValue(const PiksiDriverConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T PiksiDriverConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (PiksiDriverConfig::* field);

      virtual void clamp(PiksiDriverConfig &config, const PiksiDriverConfig &max, const PiksiDriverConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const PiksiDriverConfig &config1, const PiksiDriverConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, PiksiDriverConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const PiksiDriverConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PiksiDriverConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const PiksiDriverConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const PiksiDriverConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, PiksiDriverConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, PiksiDriverConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<PiksiDriverConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class PIKSI
{
  public:
    PIKSI()
    {
      state = true;
      name = "piksi";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class SURVEYED_POSITION
{
  public:
    SURVEYED_POSITION()
    {
      state = true;
      name = "surveyed_position";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__surveyed_position__broadcast"==(*_i)->name){piksi__surveyed_position__broadcast = boost::any_cast<bool>(val);}
        if("piksi__surveyed_position__surveyed_lat"==(*_i)->name){piksi__surveyed_position__surveyed_lat = boost::any_cast<double>(val);}
        if("piksi__surveyed_position__surveyed_lon"==(*_i)->name){piksi__surveyed_position__surveyed_lon = boost::any_cast<double>(val);}
        if("piksi__surveyed_position__surveyed_alt"==(*_i)->name){piksi__surveyed_position__surveyed_alt = boost::any_cast<double>(val);}
      }
    }

    bool piksi__surveyed_position__broadcast;
double piksi__surveyed_position__surveyed_lat;
double piksi__surveyed_position__surveyed_lon;
double piksi__surveyed_position__surveyed_alt;

    bool state;
    std::string name;

    
}surveyed_position;

class FRONTEND
{
  public:
    FRONTEND()
    {
      state = true;
      name = "frontend";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__frontend__antenna_selection"==(*_i)->name){piksi__frontend__antenna_selection = boost::any_cast<int>(val);}
      }
    }

    int piksi__frontend__antenna_selection;

    bool state;
    std::string name;

    
}frontend;

class SBP
{
  public:
    SBP()
    {
      state = true;
      name = "sbp";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__sbp__obs_msg_max_size"==(*_i)->name){piksi__sbp__obs_msg_max_size = boost::any_cast<int>(val);}
      }
    }

    int piksi__sbp__obs_msg_max_size;

    bool state;
    std::string name;

    
}sbp;

class SIMULATOR
{
  public:
    SIMULATOR()
    {
      state = true;
      name = "simulator";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__simulator__enabled"==(*_i)->name){piksi__simulator__enabled = boost::any_cast<bool>(val);}
        if("piksi__simulator__base_ecef_x"==(*_i)->name){piksi__simulator__base_ecef_x = boost::any_cast<double>(val);}
        if("piksi__simulator__base_ecef_y"==(*_i)->name){piksi__simulator__base_ecef_y = boost::any_cast<double>(val);}
        if("piksi__simulator__base_ecef_z"==(*_i)->name){piksi__simulator__base_ecef_z = boost::any_cast<double>(val);}
        if("piksi__simulator__speed"==(*_i)->name){piksi__simulator__speed = boost::any_cast<double>(val);}
        if("piksi__simulator__radius"==(*_i)->name){piksi__simulator__radius = boost::any_cast<double>(val);}
        if("piksi__simulator__pos_sigma"==(*_i)->name){piksi__simulator__pos_sigma = boost::any_cast<double>(val);}
        if("piksi__simulator__speed_sigma"==(*_i)->name){piksi__simulator__speed_sigma = boost::any_cast<double>(val);}
        if("piksi__simulator__cn0_sigma"==(*_i)->name){piksi__simulator__cn0_sigma = boost::any_cast<double>(val);}
        if("piksi__simulator__pseudorange_sigma"==(*_i)->name){piksi__simulator__pseudorange_sigma = boost::any_cast<double>(val);}
        if("piksi__simulator__phase_sigma"==(*_i)->name){piksi__simulator__phase_sigma = boost::any_cast<double>(val);}
        if("piksi__simulator__num_sats"==(*_i)->name){piksi__simulator__num_sats = boost::any_cast<int>(val);}
      }
    }

    bool piksi__simulator__enabled;
double piksi__simulator__base_ecef_x;
double piksi__simulator__base_ecef_y;
double piksi__simulator__base_ecef_z;
double piksi__simulator__speed;
double piksi__simulator__radius;
double piksi__simulator__pos_sigma;
double piksi__simulator__speed_sigma;
double piksi__simulator__cn0_sigma;
double piksi__simulator__pseudorange_sigma;
double piksi__simulator__phase_sigma;
int piksi__simulator__num_sats;

    bool state;
    std::string name;

    
}simulator;

class SOLUTION
{
  public:
    SOLUTION()
    {
      state = true;
      name = "solution";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__solution__soln_freq"==(*_i)->name){piksi__solution__soln_freq = boost::any_cast<int>(val);}
        if("piksi__solution__output_every_n_obs"==(*_i)->name){piksi__solution__output_every_n_obs = boost::any_cast<int>(val);}
        if("piksi__solution__dgnss_solution_mode"==(*_i)->name){piksi__solution__dgnss_solution_mode = boost::any_cast<int>(val);}
        if("piksi__solution__known_baseline_n"==(*_i)->name){piksi__solution__known_baseline_n = boost::any_cast<double>(val);}
        if("piksi__solution__known_baseline_e"==(*_i)->name){piksi__solution__known_baseline_e = boost::any_cast<double>(val);}
        if("piksi__solution__known_baseline_d"==(*_i)->name){piksi__solution__known_baseline_d = boost::any_cast<double>(val);}
        if("piksi__solution__elevation_mask"==(*_i)->name){piksi__solution__elevation_mask = boost::any_cast<double>(val);}
      }
    }

    int piksi__solution__soln_freq;
int piksi__solution__output_every_n_obs;
int piksi__solution__dgnss_solution_mode;
double piksi__solution__known_baseline_n;
double piksi__solution__known_baseline_e;
double piksi__solution__known_baseline_d;
double piksi__solution__elevation_mask;

    bool state;
    std::string name;

    
}solution;

class SYSTEM_MONITOR
{
  public:
    SYSTEM_MONITOR()
    {
      state = true;
      name = "system_monitor";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__system_monitor__heartbeat_period_milliseconds"==(*_i)->name){piksi__system_monitor__heartbeat_period_milliseconds = boost::any_cast<int>(val);}
        if("piksi__system_monitor__watchdog"==(*_i)->name){piksi__system_monitor__watchdog = boost::any_cast<bool>(val);}
      }
    }

    int piksi__system_monitor__heartbeat_period_milliseconds;
bool piksi__system_monitor__watchdog;

    bool state;
    std::string name;

    
}system_monitor;

class TELEMETRY_RADIO
{
  public:
    TELEMETRY_RADIO()
    {
      state = true;
      name = "telemetry_radio";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__telemetry_radio__configuration_string"==(*_i)->name){piksi__telemetry_radio__configuration_string = boost::any_cast<std::string>(val);}
      }
    }

    std::string piksi__telemetry_radio__configuration_string;

    bool state;
    std::string name;

    
}telemetry_radio;

class UART_FTDI
{
  public:
    UART_FTDI()
    {
      state = true;
      name = "uart_ftdi";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__uart_ftdi__mode"==(*_i)->name){piksi__uart_ftdi__mode = boost::any_cast<int>(val);}
        if("piksi__uart_ftdi__sbp_message_mask"==(*_i)->name){piksi__uart_ftdi__sbp_message_mask = boost::any_cast<int>(val);}
        if("piksi__uart_ftdi__baudrate"==(*_i)->name){piksi__uart_ftdi__baudrate = boost::any_cast<int>(val);}
      }
    }

    int piksi__uart_ftdi__mode;
int piksi__uart_ftdi__sbp_message_mask;
int piksi__uart_ftdi__baudrate;

    bool state;
    std::string name;

    
}uart_ftdi;

class UART_UARTA
{
  public:
    UART_UARTA()
    {
      state = true;
      name = "uart_uarta";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__uart_uarta__mode"==(*_i)->name){piksi__uart_uarta__mode = boost::any_cast<int>(val);}
        if("piksi__uart_uarta__sbp_message_mask"==(*_i)->name){piksi__uart_uarta__sbp_message_mask = boost::any_cast<int>(val);}
        if("piksi__uart_uarta__configure_telemetry_radio_on_boot"==(*_i)->name){piksi__uart_uarta__configure_telemetry_radio_on_boot = boost::any_cast<bool>(val);}
        if("piksi__uart_uarta__baudrate"==(*_i)->name){piksi__uart_uarta__baudrate = boost::any_cast<int>(val);}
      }
    }

    int piksi__uart_uarta__mode;
int piksi__uart_uarta__sbp_message_mask;
bool piksi__uart_uarta__configure_telemetry_radio_on_boot;
int piksi__uart_uarta__baudrate;

    bool state;
    std::string name;

    
}uart_uarta;

class UART_UARTB
{
  public:
    UART_UARTB()
    {
      state = true;
      name = "uart_uartb";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__uart_uartb__mode"==(*_i)->name){piksi__uart_uartb__mode = boost::any_cast<int>(val);}
        if("piksi__uart_uartb__sbp_message_mask"==(*_i)->name){piksi__uart_uartb__sbp_message_mask = boost::any_cast<int>(val);}
        if("piksi__uart_uartb__configure_telemetry_radio_on_boot"==(*_i)->name){piksi__uart_uartb__configure_telemetry_radio_on_boot = boost::any_cast<bool>(val);}
        if("piksi__uart_uartb__baudrate"==(*_i)->name){piksi__uart_uartb__baudrate = boost::any_cast<int>(val);}
      }
    }

    int piksi__uart_uartb__mode;
int piksi__uart_uartb__sbp_message_mask;
bool piksi__uart_uartb__configure_telemetry_radio_on_boot;
int piksi__uart_uartb__baudrate;

    bool state;
    std::string name;

    
}uart_uartb;

class EXT_EVENTS
{
  public:
    EXT_EVENTS()
    {
      state = true;
      name = "ext_events";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__ext_events__edge_trigger"==(*_i)->name){piksi__ext_events__edge_trigger = boost::any_cast<int>(val);}
      }
    }

    int piksi__ext_events__edge_trigger;

    bool state;
    std::string name;

    
}ext_events;

class NMEA
{
  public:
    NMEA()
    {
      state = true;
      name = "nmea";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__nmea__gpgsv_msg_rate"==(*_i)->name){piksi__nmea__gpgsv_msg_rate = boost::any_cast<int>(val);}
        if("piksi__nmea__gprmc_msg_rate"==(*_i)->name){piksi__nmea__gprmc_msg_rate = boost::any_cast<int>(val);}
        if("piksi__nmea__gpvtg_msg_rate"==(*_i)->name){piksi__nmea__gpvtg_msg_rate = boost::any_cast<int>(val);}
        if("piksi__nmea__gpgll_msg_rate"==(*_i)->name){piksi__nmea__gpgll_msg_rate = boost::any_cast<int>(val);}
      }
    }

    int piksi__nmea__gpgsv_msg_rate;
int piksi__nmea__gprmc_msg_rate;
int piksi__nmea__gpvtg_msg_rate;
int piksi__nmea__gpgll_msg_rate;

    bool state;
    std::string name;

    
}nmea;

class PPS
{
  public:
    PPS()
    {
      state = true;
      name = "pps";
    }

    void setParams(PiksiDriverConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("piksi__pps__width"==(*_i)->name){piksi__pps__width = boost::any_cast<int>(val);}
      }
    }

    int piksi__pps__width;

    bool state;
    std::string name;

    
}pps;

}piksi;

}groups;



//#line 106 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      bool piksi__surveyed_position__broadcast;
//#line 108 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__surveyed_position__surveyed_lat;
//#line 110 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__surveyed_position__surveyed_lon;
//#line 112 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__surveyed_position__surveyed_alt;
//#line 114 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__frontend__antenna_selection;
//#line 116 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__sbp__obs_msg_max_size;
//#line 118 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      bool piksi__simulator__enabled;
//#line 120 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__base_ecef_x;
//#line 122 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__base_ecef_y;
//#line 124 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__base_ecef_z;
//#line 126 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__speed;
//#line 128 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__radius;
//#line 130 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__pos_sigma;
//#line 132 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__speed_sigma;
//#line 134 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__cn0_sigma;
//#line 136 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__pseudorange_sigma;
//#line 138 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__simulator__phase_sigma;
//#line 140 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__simulator__num_sats;
//#line 142 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__solution__soln_freq;
//#line 144 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__solution__output_every_n_obs;
//#line 146 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__solution__dgnss_solution_mode;
//#line 148 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__solution__known_baseline_n;
//#line 150 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__solution__known_baseline_e;
//#line 152 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__solution__known_baseline_d;
//#line 154 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      double piksi__solution__elevation_mask;
//#line 156 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__system_monitor__heartbeat_period_milliseconds;
//#line 158 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      bool piksi__system_monitor__watchdog;
//#line 160 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      std::string piksi__telemetry_radio__configuration_string;
//#line 162 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_ftdi__mode;
//#line 164 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_ftdi__sbp_message_mask;
//#line 166 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_ftdi__baudrate;
//#line 168 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_uarta__mode;
//#line 170 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_uarta__sbp_message_mask;
//#line 172 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      bool piksi__uart_uarta__configure_telemetry_radio_on_boot;
//#line 174 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_uarta__baudrate;
//#line 176 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_uartb__mode;
//#line 178 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_uartb__sbp_message_mask;
//#line 180 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      bool piksi__uart_uartb__configure_telemetry_radio_on_boot;
//#line 182 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__uart_uartb__baudrate;
//#line 184 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__ext_events__edge_trigger;
//#line 186 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__nmea__gpgsv_msg_rate;
//#line 188 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__nmea__gprmc_msg_rate;
//#line 190 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__nmea__gpvtg_msg_rate;
//#line 192 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__nmea__gpgll_msg_rate;
//#line 194 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      int piksi__pps__width;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("PiksiDriverConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const PiksiDriverConfig &__max__ = __getMax__();
      const PiksiDriverConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const PiksiDriverConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const PiksiDriverConfig &__getDefault__();
    static const PiksiDriverConfig &__getMax__();
    static const PiksiDriverConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const PiksiDriverConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void PiksiDriverConfig::ParamDescription<std::string>::clamp(PiksiDriverConfig &config, const PiksiDriverConfig &max, const PiksiDriverConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class PiksiDriverConfigStatics
  {
    friend class PiksiDriverConfig;
    
    PiksiDriverConfigStatics()
    {
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT, PiksiDriverConfig> Default("Default", "", 0, 0, true, &PiksiDriverConfig::groups);
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI, PiksiDriverConfig::DEFAULT> piksi("piksi", "", 0, 1, true, &PiksiDriverConfig::DEFAULT::piksi);
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SURVEYED_POSITION, PiksiDriverConfig::DEFAULT::PIKSI> surveyed_position("surveyed_position", "", 1, 2, true, &PiksiDriverConfig::DEFAULT::PIKSI::surveyed_position);
//#line 106 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__surveyed_position__broadcast = 0;
//#line 106 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__surveyed_position__broadcast = 1;
//#line 106 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__surveyed_position__broadcast = 0;
//#line 106 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      surveyed_position.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__surveyed_position__broadcast", "bool", 0, "Broadcast surveyed base station location", "", &PiksiDriverConfig::piksi__surveyed_position__broadcast)));
//#line 106 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__surveyed_position__broadcast", "bool", 0, "Broadcast surveyed base station location", "", &PiksiDriverConfig::piksi__surveyed_position__broadcast)));
//#line 108 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__surveyed_position__surveyed_lat = -90.0;
//#line 108 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__surveyed_position__surveyed_lat = 90.0;
//#line 108 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__surveyed_position__surveyed_lat = 0.0;
//#line 108 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      surveyed_position.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__surveyed_position__surveyed_lat", "double", 0, "Surveyed latitude of the Piksi's antenna", "", &PiksiDriverConfig::piksi__surveyed_position__surveyed_lat)));
//#line 108 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__surveyed_position__surveyed_lat", "double", 0, "Surveyed latitude of the Piksi's antenna", "", &PiksiDriverConfig::piksi__surveyed_position__surveyed_lat)));
//#line 110 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__surveyed_position__surveyed_lon = -180.0;
//#line 110 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__surveyed_position__surveyed_lon = 180.0;
//#line 110 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__surveyed_position__surveyed_lon = 0.0;
//#line 110 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      surveyed_position.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__surveyed_position__surveyed_lon", "double", 0, "Surveyed longitude of the Piksi's antenna", "", &PiksiDriverConfig::piksi__surveyed_position__surveyed_lon)));
//#line 110 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__surveyed_position__surveyed_lon", "double", 0, "Surveyed longitude of the Piksi's antenna", "", &PiksiDriverConfig::piksi__surveyed_position__surveyed_lon)));
//#line 112 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__surveyed_position__surveyed_alt = -100.0;
//#line 112 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__surveyed_position__surveyed_alt = 20000.0;
//#line 112 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__surveyed_position__surveyed_alt = 0.0;
//#line 112 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      surveyed_position.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__surveyed_position__surveyed_alt", "double", 0, "Surveyed altitude of the Piksi's antenna", "", &PiksiDriverConfig::piksi__surveyed_position__surveyed_alt)));
//#line 112 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__surveyed_position__surveyed_alt", "double", 0, "Surveyed altitude of the Piksi's antenna", "", &PiksiDriverConfig::piksi__surveyed_position__surveyed_alt)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      surveyed_position.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SURVEYED_POSITION, PiksiDriverConfig::DEFAULT::PIKSI>(surveyed_position)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SURVEYED_POSITION, PiksiDriverConfig::DEFAULT::PIKSI>(surveyed_position)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::FRONTEND, PiksiDriverConfig::DEFAULT::PIKSI> frontend("frontend", "", 1, 3, true, &PiksiDriverConfig::DEFAULT::PIKSI::frontend);
//#line 114 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__frontend__antenna_selection = 0;
//#line 114 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__frontend__antenna_selection = 3;
//#line 114 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__frontend__antenna_selection = 0;
//#line 114 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      frontend.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__frontend__antenna_selection", "int", 0, "Determines which antenna to use.", "{'enum_description': 'An enum for antenna_selection', 'enum': [{'srcline': 15, 'description': 'Auto', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Auto'}, {'srcline': 17, 'description': 'Patch', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Patch'}, {'srcline': 19, 'description': 'External', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'External'}, {'srcline': 21, 'description': 'External (no bias)', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'External__no_bias_'}]}", &PiksiDriverConfig::piksi__frontend__antenna_selection)));
//#line 114 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__frontend__antenna_selection", "int", 0, "Determines which antenna to use.", "{'enum_description': 'An enum for antenna_selection', 'enum': [{'srcline': 15, 'description': 'Auto', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Auto'}, {'srcline': 17, 'description': 'Patch', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Patch'}, {'srcline': 19, 'description': 'External', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'External'}, {'srcline': 21, 'description': 'External (no bias)', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'External__no_bias_'}]}", &PiksiDriverConfig::piksi__frontend__antenna_selection)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      frontend.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::FRONTEND, PiksiDriverConfig::DEFAULT::PIKSI>(frontend)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::FRONTEND, PiksiDriverConfig::DEFAULT::PIKSI>(frontend)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SBP, PiksiDriverConfig::DEFAULT::PIKSI> sbp("sbp", "", 1, 4, true, &PiksiDriverConfig::DEFAULT::PIKSI::sbp);
//#line 116 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__sbp__obs_msg_max_size = 1;
//#line 116 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__sbp__obs_msg_max_size = 255;
//#line 116 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__sbp__obs_msg_max_size = 102;
//#line 116 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      sbp.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__sbp__obs_msg_max_size", "int", 0, "Determines the maximum message length for raw observation sbp messages.", "", &PiksiDriverConfig::piksi__sbp__obs_msg_max_size)));
//#line 116 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__sbp__obs_msg_max_size", "int", 0, "Determines the maximum message length for raw observation sbp messages.", "", &PiksiDriverConfig::piksi__sbp__obs_msg_max_size)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      sbp.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SBP, PiksiDriverConfig::DEFAULT::PIKSI>(sbp)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SBP, PiksiDriverConfig::DEFAULT::PIKSI>(sbp)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SIMULATOR, PiksiDriverConfig::DEFAULT::PIKSI> simulator("simulator", "", 1, 5, true, &PiksiDriverConfig::DEFAULT::PIKSI::simulator);
//#line 118 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__enabled = 0;
//#line 118 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__enabled = 1;
//#line 118 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__enabled = 0;
//#line 118 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__simulator__enabled", "bool", 0, "Toggles the Piksi internal simulator on and off", "", &PiksiDriverConfig::piksi__simulator__enabled)));
//#line 118 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__simulator__enabled", "bool", 0, "Toggles the Piksi internal simulator on and off", "", &PiksiDriverConfig::piksi__simulator__enabled)));
//#line 120 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__base_ecef_x = -10000000.0;
//#line 120 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__base_ecef_x = 10000000.0;
//#line 120 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__base_ecef_x = 0.0;
//#line 120 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__base_ecef_x", "double", 0, "Simulated base station position", "", &PiksiDriverConfig::piksi__simulator__base_ecef_x)));
//#line 120 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__base_ecef_x", "double", 0, "Simulated base station position", "", &PiksiDriverConfig::piksi__simulator__base_ecef_x)));
//#line 122 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__base_ecef_y = -10000000.0;
//#line 122 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__base_ecef_y = 10000000.0;
//#line 122 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__base_ecef_y = 0.0;
//#line 122 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__base_ecef_y", "double", 0, "Simulated base station position", "", &PiksiDriverConfig::piksi__simulator__base_ecef_y)));
//#line 122 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__base_ecef_y", "double", 0, "Simulated base station position", "", &PiksiDriverConfig::piksi__simulator__base_ecef_y)));
//#line 124 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__base_ecef_z = -10000000.0;
//#line 124 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__base_ecef_z = 10000000.0;
//#line 124 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__base_ecef_z = 0.0;
//#line 124 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__base_ecef_z", "double", 0, "Simulated base station position", "", &PiksiDriverConfig::piksi__simulator__base_ecef_z)));
//#line 124 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__base_ecef_z", "double", 0, "Simulated base station position", "", &PiksiDriverConfig::piksi__simulator__base_ecef_z)));
//#line 126 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__speed = 0.0;
//#line 126 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__speed = 1000.0;
//#line 126 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__speed = 4.0;
//#line 126 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__speed", "double", 0, "Simulated tangential speed of Piksi", "", &PiksiDriverConfig::piksi__simulator__speed)));
//#line 126 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__speed", "double", 0, "Simulated tangential speed of Piksi", "", &PiksiDriverConfig::piksi__simulator__speed)));
//#line 128 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__radius = 0.0;
//#line 128 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__radius = 42000.0;
//#line 128 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__radius = 100.0;
//#line 128 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__radius", "double", 0, "Radius of the circle around which the simulated Piksi will move", "", &PiksiDriverConfig::piksi__simulator__radius)));
//#line 128 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__radius", "double", 0, "Radius of the circle around which the simulated Piksi will move", "", &PiksiDriverConfig::piksi__simulator__radius)));
//#line 130 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__pos_sigma = 0.0;
//#line 130 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__pos_sigma = 90.0;
//#line 130 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__pos_sigma = 2.0;
//#line 130 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__pos_sigma", "double", 0, "Standard deviation of simulated single point position", "", &PiksiDriverConfig::piksi__simulator__pos_sigma)));
//#line 130 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__pos_sigma", "double", 0, "Standard deviation of simulated single point position", "", &PiksiDriverConfig::piksi__simulator__pos_sigma)));
//#line 132 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__speed_sigma = 0.0;
//#line 132 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__speed_sigma = 90.0;
//#line 132 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__speed_sigma = 0.02;
//#line 132 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__speed_sigma", "double", 0, "Standard deviation of noise addition to simulated tangential speed.", "", &PiksiDriverConfig::piksi__simulator__speed_sigma)));
//#line 132 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__speed_sigma", "double", 0, "Standard deviation of noise addition to simulated tangential speed.", "", &PiksiDriverConfig::piksi__simulator__speed_sigma)));
//#line 134 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__cn0_sigma = 0.0;
//#line 134 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__cn0_sigma = 90.0;
//#line 134 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__cn0_sigma = 0.1;
//#line 134 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__cn0_sigma", "double", 0, "Standard deviation of noise added to the simulated signal to noise ratio", "", &PiksiDriverConfig::piksi__simulator__cn0_sigma)));
//#line 134 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__cn0_sigma", "double", 0, "Standard deviation of noise added to the simulated signal to noise ratio", "", &PiksiDriverConfig::piksi__simulator__cn0_sigma)));
//#line 136 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__pseudorange_sigma = 0.0;
//#line 136 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__pseudorange_sigma = 90.0;
//#line 136 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__pseudorange_sigma = 16.0;
//#line 136 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__pseudorange_sigma", "double", 0, "Standard deviation of noise added to the simulated pseudo range", "", &PiksiDriverConfig::piksi__simulator__pseudorange_sigma)));
//#line 136 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__pseudorange_sigma", "double", 0, "Standard deviation of noise added to the simulated pseudo range", "", &PiksiDriverConfig::piksi__simulator__pseudorange_sigma)));
//#line 138 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__phase_sigma = 0.0;
//#line 138 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__phase_sigma = 90.0;
//#line 138 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__phase_sigma = 0.0009;
//#line 138 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__phase_sigma", "double", 0, "Standard deviation of noise added to the simulated carrier phase", "", &PiksiDriverConfig::piksi__simulator__phase_sigma)));
//#line 138 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__simulator__phase_sigma", "double", 0, "Standard deviation of noise added to the simulated carrier phase", "", &PiksiDriverConfig::piksi__simulator__phase_sigma)));
//#line 140 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__simulator__num_sats = 0;
//#line 140 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__simulator__num_sats = 20;
//#line 140 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__simulator__num_sats = 9;
//#line 140 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      simulator.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__simulator__num_sats", "int", 0, "The number of satellites for the simulator.", "", &PiksiDriverConfig::piksi__simulator__num_sats)));
//#line 140 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__simulator__num_sats", "int", 0, "The number of satellites for the simulator.", "", &PiksiDriverConfig::piksi__simulator__num_sats)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      simulator.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SIMULATOR, PiksiDriverConfig::DEFAULT::PIKSI>(simulator)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SIMULATOR, PiksiDriverConfig::DEFAULT::PIKSI>(simulator)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SOLUTION, PiksiDriverConfig::DEFAULT::PIKSI> solution("solution", "", 1, 6, true, &PiksiDriverConfig::DEFAULT::PIKSI::solution);
//#line 142 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__soln_freq = 0;
//#line 142 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__soln_freq = 20;
//#line 142 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__soln_freq = 10;
//#line 142 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__solution__soln_freq", "int", 0, "The rate at which a solution is generated internally to the Piksi.", "", &PiksiDriverConfig::piksi__solution__soln_freq)));
//#line 142 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__solution__soln_freq", "int", 0, "The rate at which a solution is generated internally to the Piksi.", "", &PiksiDriverConfig::piksi__solution__soln_freq)));
//#line 144 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__output_every_n_obs = 1;
//#line 144 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__output_every_n_obs = 20;
//#line 144 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__output_every_n_obs = 2;
//#line 144 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__solution__output_every_n_obs", "int", 0, "Integer divisor of solution frequency for which the observations will be output.", "", &PiksiDriverConfig::piksi__solution__output_every_n_obs)));
//#line 144 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__solution__output_every_n_obs", "int", 0, "Integer divisor of solution frequency for which the observations will be output.", "", &PiksiDriverConfig::piksi__solution__output_every_n_obs)));
//#line 146 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__dgnss_solution_mode = 0;
//#line 146 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__dgnss_solution_mode = 1;
//#line 146 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__dgnss_solution_mode = 0;
//#line 146 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__solution__dgnss_solution_mode", "int", 0, "Determines the type of RTK solution which will be output.", "{'enum_description': 'An enum for dgnss_solution_mode', 'enum': [{'srcline': 27, 'description': 'Low Latency', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Low_Latency'}, {'srcline': 29, 'description': 'Time Matched', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Time_Matched'}]}", &PiksiDriverConfig::piksi__solution__dgnss_solution_mode)));
//#line 146 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__solution__dgnss_solution_mode", "int", 0, "Determines the type of RTK solution which will be output.", "{'enum_description': 'An enum for dgnss_solution_mode', 'enum': [{'srcline': 27, 'description': 'Low Latency', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Low_Latency'}, {'srcline': 29, 'description': 'Time Matched', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Time_Matched'}]}", &PiksiDriverConfig::piksi__solution__dgnss_solution_mode)));
//#line 148 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__known_baseline_n = -10000.0;
//#line 148 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__known_baseline_n = 10000.0;
//#line 148 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__known_baseline_n = 0.0;
//#line 148 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__known_baseline_n", "double", 0, "Determines the baseline vector for the "init known baseline" feature.", "", &PiksiDriverConfig::piksi__solution__known_baseline_n)));
//#line 148 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__known_baseline_n", "double", 0, "Determines the baseline vector for the "init known baseline" feature.", "", &PiksiDriverConfig::piksi__solution__known_baseline_n)));
//#line 150 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__known_baseline_e = -10000.0;
//#line 150 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__known_baseline_e = 10000.0;
//#line 150 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__known_baseline_e = 0.0;
//#line 150 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__known_baseline_e", "double", 0, "Determines the baseline vector for the "init known baseline" feature.", "", &PiksiDriverConfig::piksi__solution__known_baseline_e)));
//#line 150 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__known_baseline_e", "double", 0, "Determines the baseline vector for the "init known baseline" feature.", "", &PiksiDriverConfig::piksi__solution__known_baseline_e)));
//#line 152 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__known_baseline_d = -10000.0;
//#line 152 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__known_baseline_d = 10000.0;
//#line 152 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__known_baseline_d = 0.0;
//#line 152 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__known_baseline_d", "double", 0, "Determines the baseline vector for the "init known baseline" feature.", "", &PiksiDriverConfig::piksi__solution__known_baseline_d)));
//#line 152 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__known_baseline_d", "double", 0, "Determines the baseline vector for the "init known baseline" feature.", "", &PiksiDriverConfig::piksi__solution__known_baseline_d)));
//#line 154 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__solution__elevation_mask = 0.0;
//#line 154 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__solution__elevation_mask = 90.0;
//#line 154 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__solution__elevation_mask = 5.0;
//#line 154 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      solution.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__elevation_mask", "double", 0, "SPP / RTK elevation mask", "", &PiksiDriverConfig::piksi__solution__elevation_mask)));
//#line 154 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<double>("piksi__solution__elevation_mask", "double", 0, "SPP / RTK elevation mask", "", &PiksiDriverConfig::piksi__solution__elevation_mask)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      solution.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SOLUTION, PiksiDriverConfig::DEFAULT::PIKSI>(solution)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SOLUTION, PiksiDriverConfig::DEFAULT::PIKSI>(solution)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SYSTEM_MONITOR, PiksiDriverConfig::DEFAULT::PIKSI> system_monitor("system_monitor", "", 1, 7, true, &PiksiDriverConfig::DEFAULT::PIKSI::system_monitor);
//#line 156 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__system_monitor__heartbeat_period_milliseconds = 1000;
//#line 156 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__system_monitor__heartbeat_period_milliseconds = 10000;
//#line 156 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__system_monitor__heartbeat_period_milliseconds = 0;
//#line 156 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      system_monitor.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__system_monitor__heartbeat_period_milliseconds", "int", 0, "Period for sending the SBP_HEARTBEAT messages", "", &PiksiDriverConfig::piksi__system_monitor__heartbeat_period_milliseconds)));
//#line 156 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__system_monitor__heartbeat_period_milliseconds", "int", 0, "Period for sending the SBP_HEARTBEAT messages", "", &PiksiDriverConfig::piksi__system_monitor__heartbeat_period_milliseconds)));
//#line 158 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__system_monitor__watchdog = 0;
//#line 158 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__system_monitor__watchdog = 1;
//#line 158 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__system_monitor__watchdog = 1;
//#line 158 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      system_monitor.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__system_monitor__watchdog", "bool", 0, "Enable hardware watchdog timer to reset the Piksi if it locks up for any reason.", "", &PiksiDriverConfig::piksi__system_monitor__watchdog)));
//#line 158 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__system_monitor__watchdog", "bool", 0, "Enable hardware watchdog timer to reset the Piksi if it locks up for any reason.", "", &PiksiDriverConfig::piksi__system_monitor__watchdog)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      system_monitor.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SYSTEM_MONITOR, PiksiDriverConfig::DEFAULT::PIKSI>(system_monitor)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::SYSTEM_MONITOR, PiksiDriverConfig::DEFAULT::PIKSI>(system_monitor)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::TELEMETRY_RADIO, PiksiDriverConfig::DEFAULT::PIKSI> telemetry_radio("telemetry_radio", "", 1, 8, true, &PiksiDriverConfig::DEFAULT::PIKSI::telemetry_radio);
//#line 160 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__telemetry_radio__configuration_string = "";
//#line 160 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__telemetry_radio__configuration_string = "";
//#line 160 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__telemetry_radio__configuration_string = "";
//#line 160 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      telemetry_radio.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<std::string>("piksi__telemetry_radio__configuration_string", "str", 0, "Configuration string to send radio modem over UART when detected", "", &PiksiDriverConfig::piksi__telemetry_radio__configuration_string)));
//#line 160 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<std::string>("piksi__telemetry_radio__configuration_string", "str", 0, "Configuration string to send radio modem over UART when detected", "", &PiksiDriverConfig::piksi__telemetry_radio__configuration_string)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      telemetry_radio.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::TELEMETRY_RADIO, PiksiDriverConfig::DEFAULT::PIKSI>(telemetry_radio)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::TELEMETRY_RADIO, PiksiDriverConfig::DEFAULT::PIKSI>(telemetry_radio)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_FTDI, PiksiDriverConfig::DEFAULT::PIKSI> uart_ftdi("uart_ftdi", "", 1, 9, true, &PiksiDriverConfig::DEFAULT::PIKSI::uart_ftdi);
//#line 162 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_ftdi__mode = 0;
//#line 162 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_ftdi__mode = 2;
//#line 162 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_ftdi__mode = 0;
//#line 162 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_ftdi.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_ftdi__mode", "int", 0, "Configure mode for USB serial port on Piksi", "{'enum_description': 'An enum for mode', 'enum': [{'srcline': 55, 'description': 'SBP', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SBP'}, {'srcline': 57, 'description': 'NMEA', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NMEA'}, {'srcline': 59, 'description': 'RTCM', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RTCM'}]}", &PiksiDriverConfig::piksi__uart_ftdi__mode)));
//#line 162 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_ftdi__mode", "int", 0, "Configure mode for USB serial port on Piksi", "{'enum_description': 'An enum for mode', 'enum': [{'srcline': 55, 'description': 'SBP', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SBP'}, {'srcline': 57, 'description': 'NMEA', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NMEA'}, {'srcline': 59, 'description': 'RTCM', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RTCM'}]}", &PiksiDriverConfig::piksi__uart_ftdi__mode)));
//#line 164 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_ftdi__sbp_message_mask = 0;
//#line 164 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_ftdi__sbp_message_mask = 65535;
//#line 164 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_ftdi__sbp_message_mask = 65535;
//#line 164 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_ftdi.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_ftdi__sbp_message_mask", "int", 0, "Configure the message mask for SBP messages on the UART for the USB port on Piksi", "", &PiksiDriverConfig::piksi__uart_ftdi__sbp_message_mask)));
//#line 164 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_ftdi__sbp_message_mask", "int", 0, "Configure the message mask for SBP messages on the UART for the USB port on Piksi", "", &PiksiDriverConfig::piksi__uart_ftdi__sbp_message_mask)));
//#line 166 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_ftdi__baudrate = 0;
//#line 166 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_ftdi__baudrate = 1000000;
//#line 166 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_ftdi__baudrate = 1000000;
//#line 166 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_ftdi.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_ftdi__baudrate", "int", 0, "The baudrate for the UART for the USB port on Piksi", "", &PiksiDriverConfig::piksi__uart_ftdi__baudrate)));
//#line 166 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_ftdi__baudrate", "int", 0, "The baudrate for the UART for the USB port on Piksi", "", &PiksiDriverConfig::piksi__uart_ftdi__baudrate)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      uart_ftdi.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_FTDI, PiksiDriverConfig::DEFAULT::PIKSI>(uart_ftdi)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_FTDI, PiksiDriverConfig::DEFAULT::PIKSI>(uart_ftdi)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_UARTA, PiksiDriverConfig::DEFAULT::PIKSI> uart_uarta("uart_uarta", "", 1, 10, true, &PiksiDriverConfig::DEFAULT::PIKSI::uart_uarta);
//#line 168 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uarta__mode = 0;
//#line 168 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uarta__mode = 2;
//#line 168 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uarta__mode = 0;
//#line 168 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uarta.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uarta__mode", "int", 0, "Configure mode for UART", "{'enum_description': 'An enum for mode', 'enum': [{'srcline': 55, 'description': 'SBP', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SBP'}, {'srcline': 57, 'description': 'NMEA', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NMEA'}, {'srcline': 59, 'description': 'RTCM', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RTCM'}]}", &PiksiDriverConfig::piksi__uart_uarta__mode)));
//#line 168 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uarta__mode", "int", 0, "Configure mode for UART", "{'enum_description': 'An enum for mode', 'enum': [{'srcline': 55, 'description': 'SBP', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SBP'}, {'srcline': 57, 'description': 'NMEA', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NMEA'}, {'srcline': 59, 'description': 'RTCM', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RTCM'}]}", &PiksiDriverConfig::piksi__uart_uarta__mode)));
//#line 170 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uarta__sbp_message_mask = 0;
//#line 170 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uarta__sbp_message_mask = 65535;
//#line 170 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uarta__sbp_message_mask = 64;
//#line 170 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uarta.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uarta__sbp_message_mask", "int", 0, "Configure the message mask for SBP messages on UART", "", &PiksiDriverConfig::piksi__uart_uarta__sbp_message_mask)));
//#line 170 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uarta__sbp_message_mask", "int", 0, "Configure the message mask for SBP messages on UART", "", &PiksiDriverConfig::piksi__uart_uarta__sbp_message_mask)));
//#line 172 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uarta__configure_telemetry_radio_on_boot = 0;
//#line 172 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uarta__configure_telemetry_radio_on_boot = 1;
//#line 172 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uarta__configure_telemetry_radio_on_boot = 1;
//#line 172 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uarta.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__uart_uarta__configure_telemetry_radio_on_boot", "bool", 0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", "", &PiksiDriverConfig::piksi__uart_uarta__configure_telemetry_radio_on_boot)));
//#line 172 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__uart_uarta__configure_telemetry_radio_on_boot", "bool", 0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", "", &PiksiDriverConfig::piksi__uart_uarta__configure_telemetry_radio_on_boot)));
//#line 174 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uarta__baudrate = 0;
//#line 174 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uarta__baudrate = 1000000;
//#line 174 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uarta__baudrate = 57600;
//#line 174 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uarta.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uarta__baudrate", "int", 0, "The baudrate for the UART", "", &PiksiDriverConfig::piksi__uart_uarta__baudrate)));
//#line 174 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uarta__baudrate", "int", 0, "The baudrate for the UART", "", &PiksiDriverConfig::piksi__uart_uarta__baudrate)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      uart_uarta.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_UARTA, PiksiDriverConfig::DEFAULT::PIKSI>(uart_uarta)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_UARTA, PiksiDriverConfig::DEFAULT::PIKSI>(uart_uarta)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_UARTB, PiksiDriverConfig::DEFAULT::PIKSI> uart_uartb("uart_uartb", "", 1, 11, true, &PiksiDriverConfig::DEFAULT::PIKSI::uart_uartb);
//#line 176 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uartb__mode = 0;
//#line 176 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uartb__mode = 2;
//#line 176 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uartb__mode = 0;
//#line 176 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uartb.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uartb__mode", "int", 0, "Configure mode for UART", "{'enum_description': 'An enum for mode', 'enum': [{'srcline': 55, 'description': 'SBP', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SBP'}, {'srcline': 57, 'description': 'NMEA', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NMEA'}, {'srcline': 59, 'description': 'RTCM', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RTCM'}]}", &PiksiDriverConfig::piksi__uart_uartb__mode)));
//#line 176 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uartb__mode", "int", 0, "Configure mode for UART", "{'enum_description': 'An enum for mode', 'enum': [{'srcline': 55, 'description': 'SBP', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SBP'}, {'srcline': 57, 'description': 'NMEA', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NMEA'}, {'srcline': 59, 'description': 'RTCM', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RTCM'}]}", &PiksiDriverConfig::piksi__uart_uartb__mode)));
//#line 178 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uartb__sbp_message_mask = 0;
//#line 178 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uartb__sbp_message_mask = 65535;
//#line 178 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uartb__sbp_message_mask = 65280;
//#line 178 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uartb.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uartb__sbp_message_mask", "int", 0, "Configure the message mask for SBP messages on UART", "", &PiksiDriverConfig::piksi__uart_uartb__sbp_message_mask)));
//#line 178 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uartb__sbp_message_mask", "int", 0, "Configure the message mask for SBP messages on UART", "", &PiksiDriverConfig::piksi__uart_uartb__sbp_message_mask)));
//#line 180 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uartb__configure_telemetry_radio_on_boot = 0;
//#line 180 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uartb__configure_telemetry_radio_on_boot = 1;
//#line 180 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uartb__configure_telemetry_radio_on_boot = 1;
//#line 180 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uartb.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__uart_uartb__configure_telemetry_radio_on_boot", "bool", 0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", "", &PiksiDriverConfig::piksi__uart_uartb__configure_telemetry_radio_on_boot)));
//#line 180 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<bool>("piksi__uart_uartb__configure_telemetry_radio_on_boot", "bool", 0, "Determines whether this UART will attempt to configure a telemetry radio upon boot", "", &PiksiDriverConfig::piksi__uart_uartb__configure_telemetry_radio_on_boot)));
//#line 182 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__uart_uartb__baudrate = 0;
//#line 182 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__uart_uartb__baudrate = 1000000;
//#line 182 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__uart_uartb__baudrate = 115200;
//#line 182 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      uart_uartb.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uartb__baudrate", "int", 0, "The baudrate for the uart", "", &PiksiDriverConfig::piksi__uart_uartb__baudrate)));
//#line 182 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__uart_uartb__baudrate", "int", 0, "The baudrate for the uart", "", &PiksiDriverConfig::piksi__uart_uartb__baudrate)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      uart_uartb.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_UARTB, PiksiDriverConfig::DEFAULT::PIKSI>(uart_uartb)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::UART_UARTB, PiksiDriverConfig::DEFAULT::PIKSI>(uart_uartb)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::EXT_EVENTS, PiksiDriverConfig::DEFAULT::PIKSI> ext_events("ext_events", "", 1, 12, true, &PiksiDriverConfig::DEFAULT::PIKSI::ext_events);
//#line 184 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__ext_events__edge_trigger = 0;
//#line 184 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__ext_events__edge_trigger = 3;
//#line 184 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__ext_events__edge_trigger = 0;
//#line 184 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      ext_events.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__ext_events__edge_trigger", "int", 0, "Select DEBUG0 edges to trigger timestamped event capture.", "{'enum_description': 'An enum for edge_trigger', 'enum': [{'srcline': 65, 'description': 'None', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'None'}, {'srcline': 67, 'description': 'Rising', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Rising'}, {'srcline': 69, 'description': 'Falling', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Falling'}, {'srcline': 71, 'description': 'Both', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Both'}]}", &PiksiDriverConfig::piksi__ext_events__edge_trigger)));
//#line 184 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__ext_events__edge_trigger", "int", 0, "Select DEBUG0 edges to trigger timestamped event capture.", "{'enum_description': 'An enum for edge_trigger', 'enum': [{'srcline': 65, 'description': 'None', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'None'}, {'srcline': 67, 'description': 'Rising', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Rising'}, {'srcline': 69, 'description': 'Falling', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Falling'}, {'srcline': 71, 'description': 'Both', 'srcfile': '/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Both'}]}", &PiksiDriverConfig::piksi__ext_events__edge_trigger)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      ext_events.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::EXT_EVENTS, PiksiDriverConfig::DEFAULT::PIKSI>(ext_events)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::EXT_EVENTS, PiksiDriverConfig::DEFAULT::PIKSI>(ext_events)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::NMEA, PiksiDriverConfig::DEFAULT::PIKSI> nmea("nmea", "", 1, 13, true, &PiksiDriverConfig::DEFAULT::PIKSI::nmea);
//#line 186 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__nmea__gpgsv_msg_rate = 0;
//#line 186 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__nmea__gpgsv_msg_rate = 20;
//#line 186 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__nmea__gpgsv_msg_rate = 10;
//#line 186 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      nmea.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gpgsv_msg_rate", "int", 0, "Number of ticks between GPGSV NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gpgsv_msg_rate)));
//#line 186 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gpgsv_msg_rate", "int", 0, "Number of ticks between GPGSV NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gpgsv_msg_rate)));
//#line 188 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__nmea__gprmc_msg_rate = 0;
//#line 188 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__nmea__gprmc_msg_rate = 20;
//#line 188 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__nmea__gprmc_msg_rate = 10;
//#line 188 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      nmea.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gprmc_msg_rate", "int", 0, "Number of ticks between GPRMC NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gprmc_msg_rate)));
//#line 188 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gprmc_msg_rate", "int", 0, "Number of ticks between GPRMC NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gprmc_msg_rate)));
//#line 190 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__nmea__gpvtg_msg_rate = 0;
//#line 190 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__nmea__gpvtg_msg_rate = 20;
//#line 190 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__nmea__gpvtg_msg_rate = 10;
//#line 190 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      nmea.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gpvtg_msg_rate", "int", 0, "Number of ticks between GPVTG NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gpvtg_msg_rate)));
//#line 190 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gpvtg_msg_rate", "int", 0, "Number of ticks between GPVTG NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gpvtg_msg_rate)));
//#line 192 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__nmea__gpgll_msg_rate = 0;
//#line 192 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__nmea__gpgll_msg_rate = 20;
//#line 192 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__nmea__gpgll_msg_rate = 10;
//#line 192 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      nmea.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gpgll_msg_rate", "int", 0, "Number of ticks between GPGLL NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gpgll_msg_rate)));
//#line 192 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__nmea__gpgll_msg_rate", "int", 0, "Number of ticks between GPGLL NMEA messages being sent.", "", &PiksiDriverConfig::piksi__nmea__gpgll_msg_rate)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      nmea.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::NMEA, PiksiDriverConfig::DEFAULT::PIKSI>(nmea)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::NMEA, PiksiDriverConfig::DEFAULT::PIKSI>(nmea)));
PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::PPS, PiksiDriverConfig::DEFAULT::PIKSI> pps("pps", "", 1, 14, true, &PiksiDriverConfig::DEFAULT::PIKSI::pps);
//#line 194 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __min__.piksi__pps__width = -2147483648;
//#line 194 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __max__.piksi__pps__width = 2147483647;
//#line 194 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __default__.piksi__pps__width = 200000;
//#line 194 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      pps.abstract_parameters.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__pps__width", "int", 0, "Number of microseconds the PPS will remain high (1-999999).", "", &PiksiDriverConfig::piksi__pps__width)));
//#line 194 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      __param_descriptions__.push_back(PiksiDriverConfig::AbstractParamDescriptionConstPtr(new PiksiDriverConfig::ParamDescription<int>("piksi__pps__width", "int", 0, "Number of microseconds the PPS will remain high (1-999999).", "", &PiksiDriverConfig::piksi__pps__width)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      pps.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::PPS, PiksiDriverConfig::DEFAULT::PIKSI>(pps)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI::PPS, PiksiDriverConfig::DEFAULT::PIKSI>(pps)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      piksi.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI, PiksiDriverConfig::DEFAULT>(piksi)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT::PIKSI, PiksiDriverConfig::DEFAULT>(piksi)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PiksiDriverConfig::AbstractGroupDescriptionConstPtr(new PiksiDriverConfig::GroupDescription<PiksiDriverConfig::DEFAULT, PiksiDriverConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<PiksiDriverConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<PiksiDriverConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<PiksiDriverConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    PiksiDriverConfig __max__;
    PiksiDriverConfig __min__;
    PiksiDriverConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const PiksiDriverConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static PiksiDriverConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &PiksiDriverConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const PiksiDriverConfig &PiksiDriverConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const PiksiDriverConfig &PiksiDriverConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const PiksiDriverConfig &PiksiDriverConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<PiksiDriverConfig::AbstractParamDescriptionConstPtr> &PiksiDriverConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<PiksiDriverConfig::AbstractGroupDescriptionConstPtr> &PiksiDriverConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const PiksiDriverConfigStatics *PiksiDriverConfig::__get_statics__()
  {
    const static PiksiDriverConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = PiksiDriverConfigStatics::get_instance();
    
    return statics;
  }

//#line 15 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Auto = 0;
//#line 17 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Patch = 1;
//#line 19 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_External = 2;
//#line 21 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_External__no_bias_ = 3;
//#line 27 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Low_Latency = 0;
//#line 29 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Time_Matched = 1;
//#line 35 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_SBP = 0;
//#line 37 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_NMEA = 1;
//#line 39 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_RTCM = 2;
//#line 45 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_SBP = 0;
//#line 47 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_NMEA = 1;
//#line 49 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_RTCM = 2;
//#line 55 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_SBP = 0;
//#line 57 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_NMEA = 1;
//#line 59 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_RTCM = 2;
//#line 65 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_None = 0;
//#line 67 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Rising = 1;
//#line 69 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Falling = 2;
//#line 71 "/home/christian/DARTFSD/catkin_ws/src/piksi_ros/cfg/PiksiDriverConfig.cfg"
      const int PiksiDriver_Both = 3;
}

#endif // __PIKSIDRIVERRECONFIGURATOR_H__
